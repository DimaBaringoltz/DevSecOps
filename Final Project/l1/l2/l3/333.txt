Создайте анонимный файл и верните дескриптор файла, который ссылается на него. flags должна быть одной из os.MFD_*констант, доступных в системе (или их комбинацией побитового ИЛИ). По умолчанию новый файловый дескриптор не наследуется .

Имя, указанное в name , используется как имя файла и будет отображаться как цель соответствующей символической ссылки в каталоге /proc/self/fd/. Отображаемое имя всегда имеет префикс memfd: и служит только для целей отладки. Имена не влияют на поведение дескриптора файла, поэтому несколько файлов могут иметь одно и то же имя без каких-либо побочных эффектов.

Доступность : Linux >= 3.17 с glibc >= 2.27.

Новое в версии 3.8.

НАС. MFD_CLOEXEC
Операционные системы. MFD_ALLOW_SEALING
НАС. MFD_HUGETLB
НАС. MFD_HUGE_SHIFT
НАС. MFD_HUGE_MASK
НАС. MFD_HUGE_64KB
НАС. MFD_HUGE_512KB
НАС. MFD_HUGE_1MB
НАС. MFD_HUGE_2MB
НАС. MFD_HUGE_8MB
НАС. MFD_HUGE_16MB
НАС. MFD_HUGE_32MB
НАС. MFD_HUGE_256MB
НАС. MFD_HUGE_512MB
НАС. MFD_HUGE_1GB
НАС. MFD_HUGE_2GB
НАС. MFD_HUGE_16GB
Эти флаги могут быть переданы в memfd_create().

Доступность : Linux >= 3.17 с glibc >= 2.27

Флаги MFD_HUGE*доступны только начиная с Linux 4.14.

Новое в версии 3.8.

ты. eventfd ( initval [ , flags=os.EFD_CLOEXEC ] ) 
Создайте и верните дескриптор файла события. Дескрипторы файлов поддерживают raw read()и write()с размером буфера 8, select(), poll()и т.п. См. справочную страницу eventfd(2) для получения дополнительной информации. По умолчанию новый файловый дескриптор не наследуется .

initval — начальное значение счетчика событий. Начальное значение должно быть 32-битным целым числом без знака. Обратите внимание, что начальное значение ограничено 32-битным целым числом без знака, хотя счетчик событий представляет собой 64-битное целое число без знака с максимальным значением 2 64 -2.

флаги могут быть построены из EFD_CLOEXEC, EFD_NONBLOCKи EFD_SEMAPHORE.

Если EFD_SEMAPHOREуказано и счетчик событий не равен нулю, eventfd_read()возвращает 1 и уменьшает счетчик на единицу.

Если EFD_SEMAPHOREне указано и счетчик событий не равен нулю, eventfd_read()возвращает текущее значение счетчика событий и сбрасывает счетчик на ноль.

Если счетчик событий равен нулю и EFD_NONBLOCKне указан, eventfd_read()блокируется.

eventfd_write()увеличивает счетчик событий. Блоки записи, если операция записи увеличит счетчик до значения, превышающего 2 64 -2.

Пример:

import os

# semaphore with start value '1'
fd = os.eventfd(1, os.EFD_SEMAPHORE | os.EFC_CLOEXEC)
try:
    # acquire semaphore
    v = os.eventfd_read(fd)
    try:
        do_work()
    finally:
        # release semaphore
        os.eventfd_write(fd, v)
finally:
    os.close(fd)
Доступность : Linux >= 2.6.27 с glibc >= 2.8

Новое в версии 3.10.